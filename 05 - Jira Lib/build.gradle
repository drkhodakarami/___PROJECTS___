plugins {
	id 'fabric-loom' version "${loom_version}"
	id 'maven-publish'
}

version = project.mod_version

base {
	archivesName = "${project.archives_base_name}"
}

repositories {
	mavenCentral()
	//maven { url 'https://repo.repsy.io/mvn/jiraiyah/jilibs' }
}

loom {
    accessWidenerPath = file("src/main/resources/${project.mod_id}.accesswidener")
}

fabricApi {
	configureDataGeneration {
		client = true
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	
	// Ji Lib Mods Dependency ========================================================================================================================
    //modImplementation include("jiraiyah.logger:jilogger:${jilogger_version}")
}

processResources {
    inputs.property "version", rootProject.mod_version
    inputs.property "loader_ver", rootProject.loader_version
    inputs.property "game_ver", rootProject.minecraft_version
    inputs.property "java_ver", rootProject.java_version
    inputs.property "mod_id", project.mod_id

    filesMatching("fabric.mod.json") {
        expand "version": rootProject.mod_version,
                "loader_ver": rootProject.loader_version,
                "game_ver": rootProject.minecraft_version,
                "java_ver": rootProject.java_version,
                "mod_id": project.mod_id
    }

    filesMatching("${project.mod_id}.mixins.json") {
        expand "java_ver": rootProject.java_version
    }
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	inputs.property "archivesName", project.base.archivesName

	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}"}
	}
}

def ENV = System.getenv()
def systemRepsyURL = ENV.REPSY_URL
def systemRepsyUsername = ENV.REPSY_USERNAME
def systemRepsyPassword = ENV.REPSY_PASSWORD

Properties properties = new Properties()
def propertiesFile = project.rootProject.file('local.properties')
if (propertiesFile.exists())
	properties.load(propertiesFile.newDataInputStream())

def localRepsyUrl = properties.getProperty('REPSY_URL')
def localRepsyUsername = properties.getProperty('REPSY_USERNAME')
def localRepsyPassword = properties.getProperty('REPSY_PASSWORD')

def repsyUrl = localRepsyUrl != null ? localRepsyUrl : systemRepsyURL
def repsyUsername = localRepsyUsername != null ? localRepsyUsername : systemRepsyUsername
def repsyPassword = localRepsyPassword != null ? localRepsyPassword : systemRepsyPassword


publishing {
	publications {
		maven(MavenPublication) {
			from components.java

			groupId = project.maven_group
			artifactId = project.maven_artifact
			version = rootProject.mod_version
		}
	}

	repositories {
		if (repsyUrl) {
			maven {
				url repsyUrl
				credentials {
					username repsyUsername
					password repsyPassword
				}
			}
		}
	}
}